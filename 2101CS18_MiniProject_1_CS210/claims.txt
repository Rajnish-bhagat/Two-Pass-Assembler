/*****************************************************************************
TITLE: Claims																																
AUTHOR: Bhagat Rajnish Omprakash
ROLL NUMBER: 2101CS18
Declaration of Authorship
This txt file, claims.txt, is part of the miniproject of CS209/CS210 at the 
department of Computer Science and Engg, IIT Patna . 
*****************************************************************************/

Files:
==========
*All the files i submitted, asm.c and emu.c and claims.txt, have my name and student id at the start, along with a declaration of authorship.

The evidence for Assembler including the output files from the 5 test examples has also been uploaded. They are test1(3 output files), test2(3 output files), test3
(3 output file), memcpy(3 output files) and triangle(3 output files). All the test files have been tested and work properly. As for the evidence for the emulator is uploaded
with two output files, memcpy.txt and triangle.txt.

There are two algorithms named "Bubble_Sort.asm", "Perimeter.asm". There are listing,error,object file for both of them. Dump for each of them has also been provided in the zip file.


*Both of my c programs did not show any errors and warnings when i compiled it with
gcc -std=c89 -pedantic and gcc -std=c89 -pedantic -W -Wall -Wpointer-arith -Wwrite-strings -Wstrict-prototypes standard  or equilvalent ....or gcc ... or g++

*Two programs are compilable with g++ asm.c -o asm and g++ emu.c -o emu.

* Note: My assembler will always take input from "input.asm" file and will produce output files as "listing.lst", "error.log", "machine.o" .
  As a result of this, Emulator takes input from "machine.o" file only.

=============================
Program format and structure:
=============================
1. The assembler:

    * with data structures to store labels and mnemonic table with expected operands.
    * uses single routine for both passes.
    * detects label erros.
    * consistent and sensible formatting with sensible program structure. 
    * sensible variable, function & type names with explanatory comments.
		* advanced listing file.
		* assembles test programs.
	  * can implement and demonstrates the instruction SET.

2. The emulator:

	* with three data structures to store respectively memory, mneumonic table with corresponding opcodes
    * loads object file, 
    * asks for input machine code file name from user, after which the program gives out 4 options: trace, before instruction, after instruction, and isa. Once the user gives the option, the program prints the appropriate output in the terminal and produces the memory dump.



=============================
Testing:
=============================

1. The assembler:

I have tested seven examples shown as bellow. The errors only occurred in the file test2.asm and 
the program immediately stopped on the second pass. 

The others were tested without any errors detected and produced three output files, listing file, 
error log file and machine readable object file, for each example. 

After comparing the listing files and object file of memcpy.asm , memcpy.lst, triangle.l memcpy.o 
with the implemented result given on the assignment, both of them show no difference 
from those provided( if there is different  that is fine too) 
 

1)
#Input: asm test1.asm
#Output: 
a. test1.lst 
b. test1.log (without one warning messages)
c. test1.o

2)
#Input:asm test2.asm
#Output: 
a. test2.lst 
b. test2.log (with error messages shown as below, also in log file)
c. test2.o

Error messages:
Empty Label Warning at line number: 3
Duplicate Label Definition at line number: 4
No such Label at line number: 5
Not a Number at line number: 6
Missing Operand at line number: 7
Unexpected Operand at line number: 8
Extra on End of Line at line number: 9
Bogus Label Name at line number: 10
Bogus Mnemonic at line number: 11
Bogus Mnemonic at line number: 12


3)
#Input:asm test3.asm
#Output: 
a. test3.lst 
b. test3.log (without any error messages)
c. test3.o


4)
#Input:asm memcpy.asm
#Output: 
a. memcpy.lst 
b. memcpy.log (without any error messages)
c. memcpy.o

5)
#Input:asm triangle.asm
#Output: 
a. triangle.l 
b. triangle.log (without any error messages)
c. triangle.o

6)
#Input:asm Bubble_Sort.asm
#Output: 
a. Bubble_Sort.l 
b. Bubble_Sort.log (without any error messages)
c. Bubble_Sort.o

7)
#Input:asm Perimeter.asm
#Output: 
a. Perimeter.l 
b. Perimeter.log (with a warning)
c. Perimeter.o



2. The emulator:

I have tested three examples shown as bellow. 

The others were tested without any errors detected and produced execution data both on the screen and 
output text file for each example according to the usage instruction. 

After running the bin file given, the trace data are the same as 
the implemented result from my own program.

1)
#Input:./emu 
enter the file name of the machine code Perimeter.o  (// Note that you have to enter "machine.o" while running the emulator)
There are four options:
1.Before instruction
2.Trace
3.After instruction
4.isa
Enter your option2
#Output: 

Trace is:
PC=00000001     SP=00800000     A=00001000      B=00000000      ldc     0000000b
PC=00000002     SP=00001000     A=00000000      B=00000000      a2sp    00000f00
PC=00000003     SP=00001000     A=0000000f      B=00000000      ldc     00000004
PC=00000004     SP=00001000     A=0000002a      B=00000000      ldnl    00000100
PC=00000005     SP=00001000     A=00000001      B=0000002a      ldc     00000008
PC=00000006     SP=00001000     A=00000054      B=0000002a      shl     ffffff0a
PC=00000007     SP=00000fff     A=00000054      B=0000002a      adj     00000003
PC=00000008     SP=00000fff     A=0000002a      B=0000002a      stl     00000f00
PC=00000009     SP=00000fff     A=0000000f      B=0000002a      ldc     00000104
PC=0000000a     SP=00000fff     A=0000000c      B=0000002a      ldnl    00000100
PC=0000000b     SP=00000fff     A=00000001      B=0000000c      ldc     00000008
PC=0000000c     SP=00000fff     A=00000018      B=0000000c      shl     00000002
PC=0000000d     SP=00000fff     A=00000054      B=00000018      ldl     00000006
PC=0000000e     SP=00000fff     A=0000006c      B=00000018      add     00000012
PC=0000000f     SP=00000fff     A=0000006c      B=00000018      HALT    0000002a
15 instructions executed

2)
#Input: ./emu 
enter the file name of the machine code memcpy.o (// Note that you have to enter "machine.o" while running the emulator)
Output:There are four options:
1.Before instruction
2.Trace
3.After instruction
4.isa
Enter your option3
47654 instructions executed
Memory after execution:
00000000        00100000        0000000b        ffffff0a        00004b00
00000004        00000003        00004a00        00000004        0000020d
00000008        0000010a        00000012        fffffd0a        00000103
0000000c        00000203        00000000        00000003        ffffff0a
00000010        00000302        00000003        00000102        0000100d
00000014        0000010a        00000302        00000005        00000302
00000018        00000101        00000303        00000002        00000101
0000001c        00000003        00000002        00000202        00000007
00000020        ffffee10        00000102        0000030a        0000000e
00000024        fffffd0a        00000103        00000203        00000100
00000028        00000008        00000302        00000007        00000410
0000002c        00000302        00000202        00000007        00000203
00000030        00000202        0000140f        00000302        ffffff01
00000034        00000003        ffffff0a        00000102        00000003
00000038        00000302        ffffff01        ffffe90d        00000102
0000003c        00000003        00000103        00000302        ffffe40d
00000040        0000010a        00000002        00000006        00000102
00000044        0000030a        0000000e        00000100        00000102
00000048        0000030a        0000000e        0000000a        00000001
#

3)
#Input:./emu
enter the file name of the machine code Bubble_Sort.o  (// Note that you have to enter "machine.o" while running the emulator)
#output:There are four options:
1.Before instruction
2.Trace
3.After instruction
4.isa
Enter your option4
1440 instructions executed
The isa is:
Opcode Mnemonic Operand
0      ldc      value
1      adc      value
2      ldl      offset
4      ldnl     offset
5      stnl     offset
6      add      none
7      sub      none
8      shl      none
9      shr      none
10     adj      value
11     a2sp     none
12     sp2a     none
13     call     offset
14     return   none
15     brz      offset
16     brlz     offset
17     br       offset
18     HALT     none
       SET      value

 